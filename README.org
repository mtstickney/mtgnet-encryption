* mtgnet-encryption
  mtgnet-encryption is an extenion to the [[https://github.com/mtstickney/cl-mtgnet][cl-mtgnet]] client library for
  the MTGNet RPC protocol that provides encrypted connections.

  Note: this extension currently depends on a version cl-mtgnet that
  is not yet available in quicklisp, and on the [[https://github.com/orthecreedence/cl-sodium.git][cl-sodium]] bindings for
  the [[http://libsodium.org][Sodium]] library, which are still incomplete.

* Usage
  : (cr:sodium-init)
  : (let ((framer ...)
  :       (transport ..)
  :       (secret (mtgnet.crypto:generate-secret-key))))
  :       (connection (make-encrypted-connection framer transport secret)))
  :   ;; Use the connection as usual.
  :   (mtgnet:connect connection)
  :   (mtgnet:invoke-rpc-method connection ...)
  :   ...
  :   ;; Secrets must be explicitly freed.
  :   (mtgnet.crypto:free-secret connection))
  Once an =encrypted-rpc-connection= instance is created, it is a
  drop-in replacement for regular connection objects, except for the
  conditions it throws. General errors encrypting or decrypting data
  will be signalled, and unauthorized client connections will cause a
  =client-not-authorized= error to be signalled (see below).

  =(cr:sodium-init)= must be called before using Sodium functions are
  called, or the process will be killed.

* API
** Package mtgnet.encryption
*** make-encrypted-connection
    =(make-encrypted-connection framer transport secret-key &optional (authorized-keys '(t)))=
    constructs a new encrypted connection. =framer= and =transport=
    are the MTGNet framer and transport objects for the
    connection. =secret-key= is the secret key that is used to drive
    the ECDH key exchange, and must be either a base64 string (which
    will be decoded with =mtgnet.crypto:decode-secret-key=), or a
    secret object of the sort returned by
    =mtgnet.crypto:decode-secret-key= or
    =mtgnet.crypto:generate-secret-key=.

    =authorized-keys= is a list of public keys that are permitted to
    do a key exchange over this connection. If the list contains =t=
    (the default), any public key may be used in an exchange. This
    offers a limited form of authentication for connections.

** Package mtgnet.crypto
*** with-secret
    =(with-secret (ptr-var) body)= is a macro that takes a secret (a
    =foreign-pointer=) and allows read-only access to it for the
    duration of =body=, restoring the no-access memory protection to
    it afterwards. All secret objects generated by this library have
    no-access memory protection applied to them, and can only be read
    in the context of a =with-secret= body or the process will be
    killed.

*** +nonce-bytes+
    =+nonce-bytes+= is a constant indicating the number of bytes that
    are used for message nonces. Nonces are generated by the library
    automatically, but it is occasionally useful to know how much of a
    message is nonce and how much is payload.

*** ecdh-session-key
    =(ecdh-session-key secret public our-nonce their-nonce)= takes the
    caller's secret and public key and the two nonces from the
    exchange, and generates a new ECDH session key. The key is
    augmented from ECDH: the ECDH session key is used as a key to hash
    the =XOR=ed nonces, and the result is returned as the final
    session key. This is meant to provide a limited amount of
    forward-secrecy, and to limit the amount that keys need to be
    changed.

    =secret= is a secret object generated by the library, public is
    a =(vector (unsigned-byte 8))= containing the public key bytes as
    derived from =secret=, and =our-nonce= and =their-nonce= are the
    two nonces from the key exchange. Clients shouldn't have much need
    for this function beyond debugging purposes.

*** generate-secret-key
    Generate and return a new secret object. 'Nuff said.

*** generate-encoded-secret
    Same as =generate-secret-key=, except instead of returning a
    secret object, it returns a base64-encoded string. Useful for
    generating new keys for humans.

*** free-secret
    Secrets are foreign objects, and cannot be garbage-collected. They
    must be explicitly freed by calling this function.

*** decode-secret-key
    Takes a base64-encoded string of the secret data and returns a
    secret object for that data. Useful for reading secret from
    e.g. config files.

*** compute-public-key
    Given a secret object, computes and returns a =(vector (unsigned-byte 8))=
    with the matching public key in it. It is preferrable to store
    only secrets and derive all public keys with this function (this
    will be handled for you for most uses).
